import http.client
import json
import os

def main(): 
    # API generated by user
    api_key = os.environ.get('API_KEY') 
    token = getToken(api_key)
    response = getResources(token)
    return response 
        
def getToken(api_key):
    # URL for token
    conn = http.client.HTTPSConnection('iam.cloud.ibm.com')
    # Payload for retrieving token. Note: An API key will need to be generated and replaced here
    payload = 'grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey&apikey=' + api_key + '&response_type=cloud_iam'
    # Required headers
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'Cache-Control': 'no-cache'
    }
    # Connect to endpoint for retrieving a token
    conn.request('POST', '/identity/token', payload, headers)
    # Get and read response data
    res = conn.getresponse().read()
    data = res.decode('utf-8')
    # Format response in JSON
    json_res = json.loads(data)
    # Concatenate token type and token value
    return json_res['token_type'] + ' ' + json_res['access_token']
            
def getResources(token):
    vpc_api_endpoint = 'eu-de.iaas.cloud.ibm.com'
    conn = http.client.HTTPSConnection(vpc_api_endpoint)
    headers = {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache',
        'Accept': 'application/json',
        'Authorization':  token,
        'cache-control': 'no-cache'
    }
    payload = ''
    api_version = '2019-09-30'
    vsi_id = os.environ.get('VSI_ID') 
    state = os.environ.get('CE_STATE') 
    # Use start to start the VMs & stop for shutting those down
    payload = 'start' if state == 'on' else 'stop'    
    payload = f'{{"type": "{payload}"}}'
    conn.request('POST', '/v1/instances/' + vsi_id + '/actions?generation=2&version=' + api_version, payload, headers)
    # Get and read response data
    res = conn.getresponse()
    data = res.read()
    return {'message': 'ok'} 

if __name__ == '__main__':
    main()
